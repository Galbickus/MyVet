/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import data.*;
import entidades.*;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Veronica
 */
public class JPHClinica extends javax.swing.JPanel {

    Mascota mascota = new Mascota();
    MascotaData md = new MascotaData();
    Cliente cliente = new Cliente();
    ClienteData cd = new ClienteData();
    private ArrayList<Mascota> lista = md.listarMascotas();

    /**
     * Creates new form HClinica
     */
    public JPHClinica() {
        initComponents();
        armarCabeceraMascotas();
        armarCabeceraHC();
        //    inicializaListaMascotas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldBusca = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMascotas = new javax.swing.JTable();
        jButtonSeleccionarMascota = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableHistoriaClinica = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jbBuscar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jlNombreCliente = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(700, 450));
        setMinimumSize(new java.awt.Dimension(700, 450));
        setPreferredSize(new java.awt.Dimension(700, 450));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 70));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(243, 243, 243));
        jLabel1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel1.setText("Historia   Clínica");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 280, 38));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_text_snippet_black_36dp.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, -1, 60));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 60));

        jPanel2.setBackground(new java.awt.Color(238, 234, 234));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldBusca.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jTextFieldBusca.setPreferredSize(new java.awt.Dimension(210, 30));
        jTextFieldBusca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBuscaKeyReleased(evt);
            }
        });
        jPanel2.add(jTextFieldBusca, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 160, 30));

        jTableMascotas.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTableMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableMascotas);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 48, 671, 90));

        jButtonSeleccionarMascota.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButtonSeleccionarMascota.setText("Seleccionar mascota");
        jButtonSeleccionarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeleccionarMascotaActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonSeleccionarMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 190, -1));

        jTableHistoriaClinica.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTableHistoriaClinica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableHistoriaClinica);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 671, 160));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel3.setText("Buscar Mascota por DNI del dueño");
        jLabel3.setPreferredSize(new java.awt.Dimension(102, 30));
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 230, 30));

        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_search_black_24dp.png"))); // NOI18N
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });
        jPanel2.add(jbBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 0, 50, 40));

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel4.setText("Historia Clinica ");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 150, 30));

        jlNombreCliente.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jPanel2.add(jlNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 200, 30));

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 700, 390));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldBuscaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBuscaKeyReleased

//        borrarFilas();
//        String variable = null;
//
//        if (jComboBoxBusca.getSelectedIndex() != 0) {
//
//            for (Mascota mascota : lista) {
//
//                switch (jComboBoxBusca.getSelectedIndex()) {
//                    case 1:
//
//                        variable = mascota.getCliente().getDni() + "";
//
//                        break;
//                    case 2:
//                        variable = mascota.getIdMascota() + "";
//
//                        break;
//                    case 3:
//                        variable = mascota.getIdMascota() + "";
//                        break;
//                    case 4:
//                        variable = mascota.getAlias().toLowerCase();
//                        break;
//                }
//
//                if (variable.startsWith(jTextFieldBusca.getText().toLowerCase())) {
//                    modeloMascotas.addRow(new Object[]{
//                        mascota.getIdMascota(),
//                        mascota.getAlias(),
//                        mascota.getSexo(),
//                        mascota.getEspecie(),
//                        mascota.getRaza(),
//                        mascota.getfN()
//
//                    });
//                } else if (jTextFieldBusca.getText().isEmpty()) {
//                    cargarTablaMascotas();
//                }
//            }
//        } else {   //si es igual a cero carga la tabla completa
//            cargarTablaMascotas();
//        }
    }//GEN-LAST:event_jTextFieldBuscaKeyReleased

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        try {
            int dni = Integer.parseInt(jTextFieldBusca.getText());
            Cliente cliente = cd.buscarClienteActivoPorDni(dni);
            jlNombreCliente.setText(cliente.getNombre() + " " + cliente.getApellido());

            cargaTablaMascotasPorDNI(dni);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "El DNI no pertenece a un cliente. " + e.getMessage());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe ingresar números. " + ex.getMessage());

        }

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jButtonSeleccionarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeleccionarMascotaActionPerformed

        int idMascota = Integer.parseInt(jTableMascotas.getValueAt(jTableMascotas.getSelectedRow(), 0).toString());
        ArrayList<Object> hc = md.listarItemsHC(idMascota);
        cargarTabla(hc);

    }//GEN-LAST:event_jButtonSeleccionarMascotaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSeleccionarMascota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableHistoriaClinica;
    private javax.swing.JTable jTableMascotas;
    private javax.swing.JTextField jTextFieldBusca;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JLabel jlNombreCliente;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel modeloMascotas = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private void armarCabeceraMascotas() {
        modeloMascotas.addColumn("Código");
        modeloMascotas.addColumn("Alias");
        modeloMascotas.addColumn("Sexo");
        modeloMascotas.addColumn("Especie");
        modeloMascotas.addColumn("Raza");
        modeloMascotas.addColumn("F. Nacim.");
        jTableMascotas.setModel(modeloMascotas);
    }

    private void cargaTablaMascotasPorDNI(int dni) {

        ArrayList<Mascota> listaMascotasPorDni = md.listarMascotasPorDni(dni);
        for (Mascota mascota : listaMascotasPorDni) {
            modeloMascotas.addRow(new Object[]{
                mascota.getIdMascota(),
                mascota.getAlias(),
                mascota.getSexo(),
                mascota.getEspecie(),
                mascota.getRaza(),
                mascota.getfN()
            });
        }

    }

    private DefaultTableModel modeloHC = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private void armarCabeceraHC() {
        modeloHC.addColumn("Fecha");
        modeloHC.addColumn("Peso");
        modeloHC.addColumn("Sintomas");
        modeloHC.addColumn("Tratamiento");
        modeloHC.addColumn("Descripción");
        jTableHistoriaClinica.setModel(modeloHC);
    }

    private void borrarFilas() {
        int f = jTextFieldBusca.getColumns() - 1;
        for (; f >= 0; f--) {
            modeloMascotas.removeRow(f);
        }
    }

    private void cargarTablaMascotas() {
        for (Mascota mascota : lista) {
            modeloMascotas.addRow(new Object[]{
                mascota.getIdMascota(),
                mascota.getAlias(),
                mascota.getSexo(),
                mascota.getEspecie(),
                mascota.getRaza(),
                mascota.getfN()

            });
        }
    }

    private void cargarTabla(ArrayList<Object> items) {
        // Borrar todas las filas existentes en la tabla antes de cargar nuevos datos
        while (modeloHC.getRowCount() > 0) {
            modeloHC.removeRow(0);
        }

        // Recorrer la lista de items y agregar cada uno al modelo de la tabla
        for (Object item : items) {
            if (item instanceof Object[]) {
                modeloHC.addRow((Object[]) item);
            }
        }

        // Actualizar la vista de la tabla
        jTableHistoriaClinica.revalidate();
    }
}
